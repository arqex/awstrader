# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: awstrader
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

custom:
  stateBucket: aws-trader-${self:provider.stage}-bot-states #unique global name it will create for the bucket
  exchangesBucket: aws-trader-${self:provider.stage}-exchanges #unique global name it will create for the bucket
  backtestsBucket: aws-trader-${self:provider.stage}-backtests
  dynamodb:
    stages:
      - ${self:provider.stage}
    start:
        migrate: true
  serverless-offline:
    httpPort: 3030
    websocketPort: 3031
    lambdaPort: 3032

provider:
  name: aws
  runtime: nodejs12.x
  region: eu-west-1
  stage: dev
  lambdaHashingVersion: 20201221
  environment:
    ACCOUNTS_TABLE: ${self:service}-${opt:stage, self:provider.stage}
    STATE_BUCKET: ${self:custom.stateBucket}
    EXCHANGES_BUCKET: ${self:custom.exchangesBucket}
    BACKTESTS_BUCKET: ${self:custom.backtestsBucket}
    region: ${self:provider.region}
    stage: ${self:provider.stage}
  iam:
    role: defaultRole
  logRetentionInDays: 14

functions:
  apitron:
    handler: apitron/apitron.apitron
    role: apiRole
    events:
      - http: ANY /
      - http: 'ANY {proxy+}'
  executor:
    handler: executor/executor.executor
  schedulator:
    handler: schedulator/schedulator.schedulator
    role: apiRole
    events:
      - schedule: cron(2 * * * ? *) # every hour at the minute 2
  supplierdo:
    handler: supplierdo/supplierdo.supplierdo
    role: apiRole
  tickerer:
    handler: tickerer/tickerer.tickerer
    role: apiRole
    events:
      - schedule: cron(*/5 * * * ? *) # every 5 minutes
  tickerUpdater:
    handler: tickerer/tickerUpdater.tickerUpdater
    role: apiRole

resources:
  Resources:
    botStateBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.stateBucket} # Getting the name of table I defined under custom in serverless.yml
    
    exchangesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.exchangesBucket} # Getting the name of table I defined under custom in serverless.yml
        CorsConfiguration:
          CorsRules:
            - 
              AllowedMethods:
                - GET
                - HEAD
              AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"
    backtestsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.backtestsBucket} # Getting the name of table I defined under custom in serverless.yml
        CorsConfiguration:
          CorsRules:
            -
              AllowedMethods:
                - GET
                - HEAD
              AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"

    
    AccountsDynamoTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "accountId"
            AttributeType: "S"
          -
            AttributeName: "resourceId"
            AttributeType: "S"
          -
            AttributeName: "active"
            AttributeType: "S"
          -
            AttributeName: "runInterval"
            AttributeType: "S"
        KeySchema:
          -
            AttributeName: "accountId"
            KeyType: "HASH"
          -
            AttributeName: "resourceId"
            KeyType: "RANGE"
        GlobalSecondaryIndexes:
          -
            IndexName: ActiveDeployments
            KeySchema:
              -
                AttributeName: "runInterval"
                KeyType: "HASH"
              - AttributeName: "active"
                KeyType: "RANGE"
            Projection: 
              ProjectionType: INCLUDE
              NonKeyAttributes:
                - accountId
                - resourceId
                
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: "NEW_IMAGE"
        TableName: ${self:provider.environment.ACCOUNTS_TABLE}

    # The default role to allow lambdas to write logs
    defaultRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /awstrader/
        RoleName: defaultRole # required if you want to use 'serverless deploy --function' later on
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        # note that these rights are needed if you want your function to be able to communicate with resources within your vpc
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Policies:
          - PolicyName: logsPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'

    # Api role that allow communication with S3 and dynamo
    apiRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /awstrader/
        RoleName: apiRole # required if you want to use 'serverless deploy --function' later on
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        # note that these rights are needed if you want your function to be able to communicate with resources within your vpc
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Policies:
          - PolicyName: apiPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                - Effect: Allow
                  Action:
                    - s3:PutObject
                    - s3:PutObjectAcl
                    - s3:GetObject
                    - s3:GetObjectAcl
                    - s3:DeleteObject
                  Resource: "*"
                - Effect: Allow
                  Action:
                    - dynamodb:Query
                    - dynamodb:Scan
                    - dynamodb:GetItem
                    - dynamodb:PutItem
                    - dynamodb:UpdateItem
                    - dynamodb:DeleteItem
                  Resource: "*"
                - Effect: "Allow"
                  Action:
                    - "lambda:InvokeFunction"
                  Resource: "*"


plugins:
  - serverless-plugin-typescript
  - serverless-dynamodb-local
  - serverless-s3-local
  - serverless-offline
